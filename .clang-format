---
BasedOnStyle: Google
IndentWidth: 4
---
Language: Cpp
DerivePointerAlignment: false
PointerAlignment: Right

ColumnLimit: '150'

#
# someLongFunction(argument1,
#                  argument2);
#
AlignAfterOpenBracket: Align

#
# #define A                                                                      \
#   int aaaa;                                                                    \
#   int b;                                                                       \
#   int dddddddddd;
#
AlignEscapedNewlines: Right

#
# int aaa = bbbbbbbbbbbbbbb +
#           ccccccccccccccc;
#
AlignOperands: true

#
# callFunction(
#    a, b, c, d);
#
AllowAllArgumentsOnNextLine: false

#
# MyClass::MyClass() :
#     member0(0), member1(2) {}
#
AllowAllConstructorInitializersOnNextLine: true

#
# void myFunction(
#    int a, int b, int c, int d, int e);
#
AllowAllParametersOfDeclarationOnNextLine: false

#
# while (true) {}
# while (true) { continue; }
#
AllowShortBlocksOnASingleLine: Never

#
# switch (a) {     
# case 1: x = 1; break;
# case 2: return;
# }
#
AllowShortCaseLabelsOnASingleLine: true

#
# class Foo {
#   void f() { foo(); }
# };
# void f() {
#   foo();
# }
# void f() {}
#
AllowShortFunctionsOnASingleLine: None

#
# if (a) return;
# else
#   return;
#
AllowShortIfStatementsOnASingleLine: WithoutElse

#
# auto lambda = [](int a) {}
# auto lambda2 = [](int a) { return a; };
#
AllowShortLambdasOnASingleLine: None

#
# class A {
#   int f() { return 0; };
# };
# int f();
# int f() { return 1; }
#
AlwaysBreakAfterReturnType: None

#
# aaaa = "bbbb"
#        "cccc";
#
AlwaysBreakBeforeMultilineStrings: false

#
# template <typename T>
# T foo() {
# }
# template <typename T>
# T foo(int aaaaaaaaaaaaaaaaaaaaa,
#       int bbbbbbbbbbbbbbbbbbbbb) {
# }
#
AlwaysBreakTemplateDeclarations: Yes

#
# void f() {
#   f(aaaaaaaaaaaaaaaaaaaa, aaaaaaaaaaaaaaaaaaaa,
#     aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa);
# }
#
BinPackArguments: false

#
# class A
# {
# public:
# private: 
# }
# struct B
# { 
# }
# enum C
# {
# }
#
BreakBeforeBraces: Custom
BraceWrapping:
  AfterStruct: true
  AfterClass: true
  AfterNamespace: true
  AfterFunction: true
  AfterCaseLabel: true
  AfterControlStatement: Always
  AfterEnum: true
  AfterUnion: true
  AfterExternBlock: true
  BeforeCatch: true
  BeforeElse: true
  SplitEmptyFunction: true
  SplitEmptyRecord: true
  SplitEmptyNamespace: true

SortIncludes: false

BreakBeforeBinaryOperators: NonAssignment
BreakBeforeTernaryOperators: true
BreakConstructorInitializers: BeforeColon
BreakInheritanceList: BeforeColon
BreakStringLiterals: true
CompactNamespaces: true
ConstructorInitializerAllOnOneLineOrOnePerLine: false
Cpp11BracedListStyle: false
FixNamespaceComments: true
IndentCaseLabels: true
IndentGotoLabels: false
KeepEmptyLinesAtTheStartOfBlocks: false
MaxEmptyLinesToKeep: 1
NamespaceIndentation: All
SortUsingDeclarations: true
SpaceAfterCStyleCast: false
SpaceAfterLogicalNot: false
SpaceAfterTemplateKeyword: false
SpaceBeforeAssignmentOperators: true
SpaceBeforeCpp11BracedList: false
SpaceBeforeCtorInitializerColon: true
SpaceBeforeInheritanceColon: true
SpaceBeforeParens: ControlStatements
SpaceBeforeRangeBasedForLoopColon: true
SpaceBeforeSquareBrackets: false
SpaceInEmptyBlock: false
SpaceInEmptyParentheses: false
SpacesInAngles: false
SpacesInCStyleCastParentheses: false
SpacesInContainerLiterals: false
SpacesInParentheses: false
SpacesInSquareBrackets: false
Standard: Latest
UseCRLF: false
UseTab: Never
AccessModifierOffset: -4